const apiKey = '21db32bae99a47d88b8195425252301';
const baseUrl = 'https://api.weatherapi.com/v1/current.json';

const locationElement = document.getElementById('location');
const temperatureElement = document.getElementById('temperature');
const descriptionElement = document.getElementById('description');
const timeElement = document.getElementById('time');
const greetingElement = document.getElementById('greeting');
const searchInput = document.getElementById('city-search');
const searchSuggestions = document.getElementById('search-suggestions');
const favoriteButton = document.getElementById('add-to-favorites');
const favoritesList = document.getElementById('favorites-list');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function getGreeting() {
    const hours = new Date().getHours();
    let greeting = '';
    if (hours >= 6 && hours < 12) {
        greeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    } else if (hours >= 12 && hours < 18) {
        greeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    } else {
        greeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    }
    greetingElement.textContent = greeting;
    greetingElement.style.opacity = 1; // –î–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateTime() {
    const now = new Date();
    const time = now.toLocaleTimeString();
    timeElement.textContent = `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${time}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function getWeather(lat, lon) {
    try {
        const url = `${baseUrl}?key=${apiKey}&q=${lat},${lon}&lang=ru`;
        const response = await fetch(url);
        const data = await response.json();

        if (data && data.current) {
            locationElement.textContent = `üìç ${data.location.name}`;
            temperatureElement.textContent = `${Math.round(data.current.temp_c)}¬∞C`;
            descriptionElement.textContent = data.current.condition.text;
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                getWeather(lat, lon);
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
            }
        );
    } else {
        alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º
async function getCitySuggestions(query) {
    try {
        const url = `https://api.weatherapi.com/v1/search.json?key=${apiKey}&q=${query}`;
        const response = await fetch(url);
        const data = await response.json();
        searchSuggestions.innerHTML = '';
        data.forEach(item => {
            const li = document.createElement('li');
            li.textContent = item.name;
            li.addEventListener('click', () => getWeatherByCity(item.name));
            searchSuggestions.appendChild(li);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É –∏–∑ –ø–æ–∏—Å–∫–∞
async function getWeatherByCity(city) {
    try {
        const url = `${baseUrl}?key=${apiKey}&q=${city}&lang=ru`;
        const response = await fetch(url);
        const data = await response.json();

        if (data && data.current) {
            locationElement.textContent = `üìç ${data.location.name}`;
            temperatureElement.textContent = `${Math.round(data.current.temp_c)}¬∞C`;
            descriptionElement.textContent = data.current.condition.text;
        } else {
            alert('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
function addToFavorites() {
    const city = locationElement.textContent.replace('üìç ', '');
    const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    if (!favorites.includes(city)) {
        favorites.push(city);
        localStorage.setItem('favorites', JSON.stringify(favorites));
        updateFavoritesList();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
function updateFavoritesList() {
    const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    favoritesList.innerHTML = '';
    favorites.forEach(city => {
        const listItem = document.createElement('li');
        listItem.textContent = city;
        listItem.addEventListener('click', () => getWeatherByCity(city));
        favoritesList.appendChild(listItem);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
searchInput.addEventListener('input', () => {
    const query = searchInput.value;
    if (query.length >= 3) {
        getCitySuggestions(query);
    } else {
        searchSuggestions.innerHTML = '';
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    getGreeting();
    updateTime();
    setInterval(updateTime, 1000);
    updateFavoritesList();
    getLocation();  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    document.body.classList.add('loaded'); // –î–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
});
