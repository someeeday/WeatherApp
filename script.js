// API –∫–ª—é—á –∏ –±–∞–∑–æ–≤—ã–π URL
const apiKey = '21db32bae99a47d88b8195425252301';
const baseUrl = 'https://api.openweathermap.org/data/2.5/weather';

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
const locationElement = document.getElementById('location');
const temperatureElement = document.getElementById('temperature');
const descriptionElement = document.getElementById('description');
const refreshButton = document.getElementById('refreshButton');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function getWeather(lat, lon) {
    try {
        const url = `${baseUrl}?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${apiKey}`;
        const response = await fetch(url);
        const data = await response.json();

        if (data.cod === 200) {
            const location = data.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ';
            const temperature = Math.round(data.main.temp);
            const description = data.weather[0].description;

            locationElement.textContent = `üìç ${location}`;
            temperatureElement.textContent = `${temperature}¬∞C`;
            descriptionElement.textContent = description.charAt(0).toUpperCase() + description.slice(1);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        locationElement.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
        temperatureElement.textContent = '--¬∞C';
        descriptionElement.textContent = '--';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                console.log(`–®–∏—Ä–æ—Ç–∞: ${lat}, –î–æ–ª–≥–æ—Ç–∞: ${lon}`);
                getWeather(lat, lon);
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        locationElement.textContent = '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        locationElement.textContent = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                        break;
                    case error.TIMEOUT:
                        locationElement.textContent = '–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
                        break;
                    default:
                        locationElement.textContent = '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è';
                }
            }
        );
    } else {
        locationElement.textContent = '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
refreshButton.addEventListener('click', getLocation);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp
document.addEventListener('DOMContentLoaded', () => {
    if (window.Telegram) {
        Telegram.WebApp.ready();
        getLocation();
    } else {
        console.error('Telegram WebApp –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        locationElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp';
    }
});
